<?xml version="1.0"?>
<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
    <algorithms>
        <algorithm id="nichePSO" class="niching.NichingAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" target="1000"/>

            <!-- Set the main swarm type and the main swarm entity type -->
            <mainSwarm class="pso.PSO">
                <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">
                    <entityType class="pso.particle.StandardParticle">
                        <velocityProvider class="pso.velocityprovider.StandardVelocityProvider">
                            <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="0.0"/>
                            <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.2"/>
                        </velocityProvider>
                        <velocityInitializationStrategy class="entity.initialization.RandomInitializationStrategy"/>
                    </entityType>
                </initialisationStrategy>

                <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                    <boundaryConstraint class="problem.boundaryconstraint.ReinitialisationBoundary"/>
                </iterationStrategy>
            </mainSwarm>

            <!-- Set the subswarm type and behavior here -->
            <nicheCreator class="niching.creation.ClosestNeighbourNicheCreationStrategy">
                <swarmType class="pso.PSO">
                    <iterationStrategy class="pso.iterationstrategies.SynchronousIterationStrategy">
                        <boundaryConstraint class="problem.boundaryconstraint.ReinitialisationBoundary"/>
                    </iterationStrategy>
                </swarmType>

                <swarmBehavior class="pso.particle.ParticleBehavior">
                    <velocityProvider class="pso.velocityprovider.GCVelocityProvider">
                        <rho class="controlparameter.ConstantControlParameter" parameter="0.001"/>
                        <delegate class="pso.velocityprovider.ClampingVelocityProvider">
                            <vMax class="controlparameter.ConstantControlParameter" parameter="1.0"/>
                            <delegate class="pso.velocityprovider.StandardVelocityProvider">
                                <cognitiveAcceleration class="controlparameter.ConstantControlParameter" parameter="1.2"/>
                                <socialAcceleration class="controlparameter.ConstantControlParameter" parameter="1.2"/>
                                <inertiaWeight class="controlparameter.LinearlyVaryingControlParameter" initialValue="0.7" finalValue="0.2"/>
                            </delegate>
                        </delegate>
                    </velocityProvider>
                </swarmBehavior>
            </nicheCreator>

            <nicheDetector class="niching.creation.MaintainedFitnessNicheDetection">
                <threshold class="controlparameter.ConstantControlParameter" parameter="1.0E-12"/>
                <stationaryCounter class="controlparameter.ConstantControlParameter" parameter="3.0"/>
            </nicheDetector>

            <mergeDetector class="niching.merging.detection.RadiusOverlapMergeDetection">
                <threshold class="controlparameter.ConstantControlParameter" parameter="1.0E-12"/>
            </mergeDetector>

            <absorptionDetector class="niching.merging.detection.RadiusOverlapMergeDetection">
                <threshold class="controlparameter.ConstantControlParameter" parameter="1.0E-12"/>
            </absorptionDetector>

            <mainSwarmMerger class="niching.merging.SingleSwarmMergeStrategy"/>
            <mainSwarmAbsorber class="niching.merging.SingleSwarmMergeStrategy"/>
            <mainSwarmCreationMerger class="niching.merging.SingleSwarmMergeStrategy"/>

            <subSwarmMerger class="niching.merging.StandardMergeStrategy"/>
            <subSwarmMerger class="niching.merging.StandardMergeStrategy"/>

            <subSwarmIterator class="niching.iterators.AllSwarmsIterator">
                <iterator class="niching.iterators.SingleNicheIteration"/>
            </subSwarmIterator>

            <mainSwarmIterator class="niching.iterators.SingleNicheIteration"/>

            <iterationStrategy class="niching.iterationstrategies.NichePSO"/>
        </algorithm>
    </algorithms>

    <problems>
        <problem id="f1" class="problem.FunctionMaximisationProblem" domain="R(0.0:1.0)">
            <function class="functions.continuous.MultimodalFunction1"/>
        </problem>
        <problem id="f2" class="problem.FunctionMaximisationProblem" domain="R(0.0:1.0)">
            <function class="functions.continuous.MultimodalFunction2"/>
        </problem>
        <problem id="f3" class="problem.FunctionMaximisationProblem" domain="R(0.0:1.0)">
            <function class="functions.continuous.MultimodalFunction3"/>
        </problem>
        <problem id="f4" class="problem.FunctionMaximisationProblem" domain="R(0.0:1.0)">
            <function class="functions.continuous.MultimodalFunction4"/>
        </problem>
        <problem id="f5" class="problem.FunctionMaximisationProblem" domain="R(-5.0:5.0)^2">
            <function class="functions.continuous.MultimodalFunction5"/>
        </problem>
    </problems>

    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="1">
        <addMeasurement class="measurement.single.SwarmSize"/>
        <addMeasurement class="measurement.multiple.CompositeMeasurement">
            <addMeasurement class="measurement.single.SwarmSize"/>
            <addMeasurement class="measurement.single.Solution"/>
        </addMeasurement>
    </measurements>

    <simulations>
        <simulation samples="1">
            <algorithm idref="nichePSO"/>
            <problem idref="f1"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/nichePSO-f1.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="nichePSO"/>
            <problem idref="f2"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/nichePSO-f2.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="nichePSO"/>
            <problem idref="f3"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/nichePSO-f3.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="nichePSO"/>
            <problem idref="f4"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/nichePSO-f4.txt"/>
        </simulation>
        <simulation samples="1">
            <algorithm idref="nichePSO"/>
            <problem idref="f5"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/nichePSO-f5.txt"/>
        </simulation>
    </simulations>
</simulator>
