<?xml version="1.0"?>
<!DOCTYPE simulator
[
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>
<simulator>
    <algorithms>
        <!--Crossover iteration strategy UNDX-->
        <algorithm id="xpso-undx-iteration-repeating" class="pso.PSO">
            <iterationStrategy class="pso.iterationstrategies.PSOCrossoverIterationStrategy">
                <crossoverOperation class="pso.crossover.operations.RepeatingCrossoverSelection">
                    <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                        <crossoverStrategy class="entity.operators.crossover.real.UnimodalNormalDistributionCrossoverStrategy">

                            <numberOfParents value="10" />
                        </crossoverStrategy>
                        <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                        <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                        <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                    </crossoverStrategy>
                    <retries class="controlparameter.ConstantControlParameter" parameter="10" />
                </crossoverOperation>
            </iterationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <algorithm id="xpso-undx-iteration-boltzmann" class="pso.PSO">
            <iterationStrategy class="pso.iterationstrategies.PSOCrossoverIterationStrategy">
                <crossoverOperation class="pso.crossover.operations.BoltzmannCrossoverSelection">
                    <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                        <crossoverStrategy class="entity.operators.crossover.real.UnimodalNormalDistributionCrossoverStrategy">

                            <numberOfParents value="10" />
                        </crossoverStrategy>
                        <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                        <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                        <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                    </crossoverStrategy>
                    <!--This is problem dependent I think-->
                    <comparator class="entity.comparator.BoltzmannComparator">
                        <tempSchedule class="controlparameter.LinearlyVaryingControlParameter"
                        initialValue="100" finalValue="1" />
                        <distribution class="math.random.UniformDistribution" />
                    </comparator>
                </crossoverOperation>
            </iterationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <!--Crossover velocity provider UNDX-->
        <algorithm id="xpso-undx-velocity" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">

                <entityType class="pso.particle.StandardParticle">
                    <!--PBest cant be same as position for UNDX because of orthonormalize function-->
                    <personalBestInitialisationStrategy class="entity.initialization.RandomInitializationStrategy" />
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <positionProvider class="pso.positionprovider.LinearPositionProvider" />
                        <velocityProvider class="pso.velocityprovider.CrossoverVelocityProvider">
                            <crossoverStrategy class="entity.operators.crossover.real.UnimodalNormalDistributionCrossoverStrategy" />
                        </velocityProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <!--Crossover gBest guide provider UNDX-->
        <algorithm id="xpso-undx-guide-repeating" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">

                <entityType class="pso.particle.StandardParticle">
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <globalGuideProvider class="pso.guideprovider.CrossoverGuideProvider">
                            <crossoverSelection class="pso.crossover.operations.RepeatingCrossoverSelection">

                                <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                                    <crossoverStrategy class="entity.operators.crossover.real.UnimodalNormalDistributionCrossoverStrategy" />
                                    <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                                    <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                                    <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                                </crossoverStrategy>
                                <retries class="controlparameter.ConstantControlParameter"
                                parameter="10" />
                            </crossoverSelection>
                        </globalGuideProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <algorithm id="xpso-undx-guide-boltzmann" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">

                <entityType class="pso.particle.StandardParticle">
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <globalGuideProvider class="pso.guideprovider.CrossoverGuideProvider">
                            <crossoverSelection class="pso.crossover.operations.BoltzmannCrossoverSelection">

                                <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                                    <crossoverStrategy class="entity.operators.crossover.real.UnimodalNormalDistributionCrossoverStrategy">

                                        <numberOfParents value="10" />
                                    </crossoverStrategy>
                                    <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                                    <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                                    <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                                </crossoverStrategy>
                                <comparator class="entity.comparator.BoltzmannComparator">
                                    <tempSchedule class="controlparameter.LinearlyVaryingControlParameter"
                                    initialValue="100" finalValue="1" />
                                    <distribution class="math.random.UniformDistribution" />
                                </comparator>
                            </crossoverSelection>
                        </globalGuideProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <!--Crossover iteration strategy PCX-->
        <algorithm id="xpso-pcx-iteration-repeating" class="pso.PSO">
            <iterationStrategy class="pso.iterationstrategies.PSOCrossoverIterationStrategy">
                <crossoverOperation class="pso.crossover.operations.RepeatingCrossoverSelection">
                    <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                        <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">

                            <numberOfParents value="10" />
                        </crossoverStrategy>
                        <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                        <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                        <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                    </crossoverStrategy>
                    <retries class="controlparameter.ConstantControlParameter" parameter="10" />
                </crossoverOperation>
            </iterationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <algorithm id="xpso-pcx-iteration-boltzmann" class="pso.PSO">
            <iterationStrategy class="pso.iterationstrategies.PSOCrossoverIterationStrategy">
                <crossoverOperation class="pso.crossover.operations.BoltzmannCrossoverSelection">
                    <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                        <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">

                            <numberOfParents value="10" />
                        </crossoverStrategy>
                        <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                        <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                        <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                    </crossoverStrategy>
                    <!--This is problem dependent I think-->
                    <comparator class="entity.comparator.BoltzmannComparator">
                        <tempSchedule class="controlparameter.LinearlyVaryingControlParameter"
                        initialValue="100" finalValue="1" />
                        <distribution class="math.random.UniformDistribution" />
                    </comparator>
                </crossoverOperation>
            </iterationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <!--Crossover velocity provider PCX-->
        <algorithm id="xpso-pcx-velocity" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">

                <entityType class="pso.particle.StandardParticle">
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <positionProvider class="pso.positionprovider.LinearPositionProvider" />
                        <velocityProvider class="pso.velocityprovider.CrossoverVelocityProvider">
                            <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy" />
                        </velocityProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <algorithm id="xpso-pcx-velocity-alternative" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">

                <entityType class="pso.particle.StandardParticle">
                    <!--PBest cant be same as position for UNDX because of orthonormalize function-->
                    <personalBestInitialisationStrategy class="entity.initialization.RandomInitializationStrategy" />
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <positionProvider class="pso.positionprovider.LinearPositionProvider" />
                        <velocityProvider class="pso.velocityprovider.DistinctCrossoverVelocityProvider">

                            <mainCrossover class="entity.operators.crossover.real.ParentCentricCrossoverStrategy" />
                            <alternateCrossover class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">

                                <sigma2 class="controlparameter.ConstantControlParameter"
                                parameter="0.0" />
                            </alternateCrossover>
                        </velocityProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <!--Crossover gBest guide provider PCX-->
        <algorithm id="xpso-pcx-guide-repeating" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">

                <entityType class="pso.particle.StandardParticle">
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <globalGuideProvider class="pso.guideprovider.CrossoverGuideProvider">
                            <crossoverSelection class="pso.crossover.operations.RepeatingCrossoverSelection">

                                <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                                    <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy" />
                                    <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                                    <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                                    <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                                </crossoverStrategy>
                                <retries class="controlparameter.ConstantControlParameter"
                                parameter="10" />
                            </crossoverSelection>
                        </globalGuideProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <algorithm id="xpso-pcx-guide-boltzmann" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">

                <entityType class="pso.particle.StandardParticle">
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <globalGuideProvider class="pso.guideprovider.CrossoverGuideProvider">
                            <crossoverSelection class="pso.crossover.operations.BoltzmannCrossoverSelection">

                                <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                                    <crossoverStrategy class="entity.operators.crossover.real.ParentCentricCrossoverStrategy">

                                        <numberOfParents value="10" />
                                    </crossoverStrategy>
                                    <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                                    <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                                    <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                                </crossoverStrategy>
                                <comparator class="entity.comparator.BoltzmannComparator">
                                    <tempSchedule class="controlparameter.LinearlyVaryingControlParameter"
                                    initialValue="100" finalValue="1" />
                                    <distribution class="math.random.UniformDistribution" />
                                </comparator>
                            </crossoverSelection>
                        </globalGuideProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <!--Crossover iteration strategy SPX-->
        <algorithm id="xpso-spx-iteration-repeating" class="pso.PSO">
            <iterationStrategy class="pso.iterationstrategies.PSOCrossoverIterationStrategy">
                <crossoverOperation class="pso.crossover.operations.RepeatingCrossoverSelection">
                    <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                        <crossoverStrategy class="entity.operators.crossover.real.SimplexCrossoverStrategy">

                            <numberOfParents value="10" />
                        </crossoverStrategy>
                        <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                        <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                        <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                    </crossoverStrategy>
                    <retries class="controlparameter.ConstantControlParameter" parameter="10" />
                </crossoverOperation>
            </iterationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <algorithm id="xpso-spx-iteration-boltzmann" class="pso.PSO">
            <iterationStrategy class="pso.iterationstrategies.PSOCrossoverIterationStrategy">
                <crossoverOperation class="pso.crossover.operations.BoltzmannCrossoverSelection">
                    <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                        <crossoverStrategy class="entity.operators.crossover.real.SimplexCrossoverStrategy">

                            <numberOfParents value="10" />
                        </crossoverStrategy>
                        <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                        <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                        <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                    </crossoverStrategy>
                    <!--This is problem dependent I think-->
                    <comparator class="entity.comparator.BoltzmannComparator">
                        <tempSchedule class="controlparameter.LinearlyVaryingControlParameter"
                        initialValue="100" finalValue="1" />
                        <distribution class="math.random.UniformDistribution" />
                    </comparator>
                </crossoverOperation>
            </iterationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <!--Crossover velocity provider SPX-->
        <algorithm id="xpso-spx-velocity" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">

                <entityType class="pso.particle.StandardParticle">
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <positionProvider class="pso.positionprovider.LinearPositionProvider" />
                        <velocityProvider class="pso.velocityprovider.CrossoverVelocityProvider">
                            <crossoverStrategy class="entity.operators.crossover.real.SimplexCrossoverStrategy" />
                        </velocityProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <!--Crossover gBest guide provider SPX-->
        <algorithm id="xpso-spx-guide-repeating" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">

                <entityType class="pso.particle.StandardParticle">
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <globalGuideProvider class="pso.guideprovider.CrossoverGuideProvider">
                            <crossoverSelection class="pso.crossover.operations.RepeatingCrossoverSelection">

                                <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                                    <crossoverStrategy class="entity.operators.crossover.real.SimplexCrossoverStrategy" />
                                    <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                                    <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                                    <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                                </crossoverStrategy>
                                <retries class="controlparameter.ConstantControlParameter"
                                parameter="10" />
                            </crossoverSelection>
                        </globalGuideProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
        <algorithm id="xpso-spx-guide-boltzmann" class="pso.PSO">
            <initialisationStrategy class="algorithm.initialisation.ClonedPopulationInitialisationStrategy">

                <entityType class="pso.particle.StandardParticle">
                    <particleBehavior class="pso.particle.ParticleBehavior">
                        <globalGuideProvider class="pso.guideprovider.CrossoverGuideProvider">
                            <crossoverSelection class="pso.crossover.operations.BoltzmannCrossoverSelection">

                                <crossoverStrategy class="pso.crossover.ParticleCrossoverStrategy">
                                    <crossoverStrategy class="entity.operators.crossover.real.SimplexCrossoverStrategy">

                                        <numberOfParents value="10" />
                                    </crossoverStrategy>
                                    <pbestProvider class="pso.crossover.pbestupdate.IdentityOffspringPBestProvider" />
                                    <velocityProvider class="pso.crossover.velocityprovider.IdentityOffspringVelocityProvider" />
                                    <fitnessProvider class="pso.crossover.fitnessupdate.NullOffspringBestFitnessProvider" />
                                </crossoverStrategy>
                                <comparator class="entity.comparator.BoltzmannComparator">
                                    <tempSchedule class="controlparameter.LinearlyVaryingControlParameter"
                                    initialValue="100" finalValue="1" />
                                    <distribution class="math.random.UniformDistribution" />
                                </comparator>
                            </crossoverSelection>
                        </globalGuideProvider>
                    </particleBehavior>
                </entityType>
            </initialisationStrategy>
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition" />
        </algorithm>
    </algorithms>
    <problems>
        <problem id="spherical" class="problem.FunctionMinimisationProblem" domain="R(300:600)^30">
            <function class="functions.continuous.decorators.ShiftedFunctionDecorator">
                <function class="functions.continuous.unconstrained.Griewank" />
                <horizontalShift class="controlparameter.ConstantControlParameter"
                parameter="500" />
            </function>
        </problem>
    </problems>
    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="1">
        <addMeasurement class="measurement.single.Fitness" />
    </measurements>
    <simulations>
        <simulation samples="1">
            <algorithm idref="xpso-undx-iteration-repeating" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-undx-iteration-repeating-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-undx-iteration-boltzmann" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-undx-iteration-boltzmann-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-undx-velocity" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-undx-velocity-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-undx-guide-repeating" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-undx-guide-repeating-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-undx-guide-boltzmann" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-undx-guide-boltzmann-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-pcx-iteration-repeating" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-iteration-repeating-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-pcx-iteration-boltzmann" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-iteration-boltzmann-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-pcx-velocity" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-velocity-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-pcx-velocity-alternative" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-velocity-alternative-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-pcx-guide-repeating" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-guide-repeating-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-pcx-guide-boltzmann" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-pcx-guide-boltzmann-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-spx-iteration-repeating" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-spx-iteration-repeating-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-spx-iteration-boltzmann" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-spx-iteration-boltzmann-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-spx-velocity" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-spx-velocity-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-spx-guide-repeating" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-spx-guide-repeating-spherical.txt" />
        </simulation>
        <simulation samples="1">
            <algorithm idref="xpso-spx-guide-boltzmann" />
            <problem idref="spherical" />
            <measurements idref="fitness" />
            <output format="TXT" file="data/xpso-spx-guide-boltzmann-spherical.txt" />
        </simulation>
    </simulations>
</simulator>

