<?xml version="1.0"?>

<!DOCTYPE simulator [
<!ATTLIST algorithm id ID #IMPLIED>
<!ATTLIST problem id ID #IMPLIED>
<!ATTLIST measurements id ID #IMPLIED>
]>

<simulator>
    <problem id="PredatorPrey" class="problem.coevolution.CompetitiveCoevolutionGameLearningOptimizationProblem" numberOfEvaluations="20">
        <game class="games.game.predatorprey.RealTimePredatorPreyGame" MaxIterations="20">
            <agent class="games.agent.NeuralAgent" AgentToken="PredatorPrey.PREDATOR">
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration"/> <!-- size is specified by neural input strategy-->
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <ActivationFunction class="functions.activation.TanH"/>
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration"> <!-- size is specified by output interpretation strategy-->
                                <ActivationFunction class="functions.activation.TanH"/>
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder" domain="R(-1,1)" />
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
                <stateInputStrategy class="games.game.predatorprey.PredatorPreyNeuralInputStrategy"/>
                <outputInterpretationStrategy class="games.game.predatorprey.NeuralPredatorOutputStrategy"/>
            </agent>
            <agent class="games.agent.NeuralAgent" AgentToken="PredatorPrey.PREY">
                <neuralNetwork class="nn.NeuralNetwork">
                    <architecture class="nn.architecture.Architecture">
                        <architectureBuilder class="nn.architecture.builder.FeedForwardArchitectureBuilder">
                            <addLayer class="nn.architecture.builder.LayerConfiguration"/>
                            <addLayer class="nn.architecture.builder.LayerConfiguration" size="4">
                                <ActivationFunction class="functions.activation.TanH"/>
                            </addLayer>
                            <addLayer class="nn.architecture.builder.LayerConfiguration">
                                <ActivationFunction class="functions.activation.TanH"/>
                            </addLayer>
                            <layerBuilder class="nn.architecture.builder.PrototypeFullyConnectedLayerBuilder" domain="R(-1,1)" />
                        </architectureBuilder>
                    </architecture>
                </neuralNetwork>
                <stateInputStrategy class="games.game.predatorprey.PredatorPreyNeuralInputStrategy"/>
                <outputInterpretationStrategy class="games.game.predatorprey.NeuralPreyOutputStrategy"/>
            </agent>
            <scoringStrategy class="games.game.predatorprey.PredatorPreyGameScoringStrategy"/>
        </game>
    </problem>

    <algorithms>
        <algorithm id="lbest" class="pso.PSO">
            <iterationStrategy class = "pso.dynamic.DynamicIterationStrategy">
            <IterationStrategy class = "pso.iterationstrategies.ASynchronousIterationStrategy"/>
                <DetectionStrategy class = "pso.dynamic.detectionstrategies.PeriodicDetectionStrategy" IterationsModulus="50"/>
                <ResponseStrategy class = "pso.dynamic.responsestrategies.CompetitiveCoevolutionParticleReevaluationResponseStrategy"/>
            </iterationStrategy>
            <initialisationStrategy class="algorithm.initialisation.ChargedPopulationInitialisationStrategy" entityNumber="40" chargeMagnitude="1.0">
                <entityType class="pso.dynamic.ChargedParticle">
                    <neighbourhoodBestUpdateStrategy class = "pso.positionprovider.IterationNeighbourhoodBestUpdateStrategy"/>
                    <velocityProvider class="pso.velocityprovider.ClampingVelocityProvider">
                        <vMax class="controlparameter.ConstantControlParameter" parameter="3.0"/>
                        <delegate class="pso.dynamic.ChargedVelocityProvider">
                            <pCore class="controlparameter.ConstantControlParameter" parameter="10" />
                            <p class="controlparameter.ConstantControlParameter" parameter="1000" />
                        </delegate>
                    </velocityProvider>
                </entityType>
            </initialisationStrategy>
            <topology class="entity.topologies.LBestTopology">
                <neighbourhoodSize class = "controlparameter.ConstantControlParameter" parameter = "3"/>
            </topology>
        </algorithm>

        <algorithm id="compcoevol" class="coevolution.CoevolutionAlgorithm">
            <addStoppingCondition class="stoppingcondition.MeasuredStoppingCondition"/>
            <coevolutionIterationStrategy class="coevolution.CompetitiveCoevolutionIterationStrategy">
                <opponentSelectionStrategy class="coevolution.selection.SelectNOpponentSelectionStrategy" numberOfOpponents="40">
                    <addPoolSelectionStrategy class = "coevolution.selection.SelectpBestSolutionsPoolSelectionStrategy"/>
                    <addPoolSelectionStrategy class = "coevolution.selection.SelectHOFPoolSelectionStrategy" HOFSize = "15" AddToHOFEpoch="50"/>
                </opponentSelectionStrategy>
            </coevolutionIterationStrategy>
        </algorithm>
    </algorithms>

    <measurements id="fitness" class="simulator.MeasurementSuite" resolution="10">
        <addMeasurement class="measurement.multiple.MultiPopulationFitness"/>
    </measurements>

    <simulations>
        <simulation samples="2">
            <algorithm idref="compcoevol">
            <algorithm idref="lbest"/>
            <algorithm idref="lbest"/>
            </algorithm>
            <problem idref="PredatorPrey"/>
            <measurements idref="fitness" />
            <output format="TXT" file="data/PredatorPreyCoevolutionPSO.txt"/>
        </simulation>
    </simulations>
</simulator>
