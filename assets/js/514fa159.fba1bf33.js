"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[79],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),m=i,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(h,r(r({ref:n},c),{},{components:t})):a.createElement(h,r({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1366:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var a=t(7462),i=t(3366),o=(t(7294),t(3905)),r=["components"],s={},l="Position",p={unversionedId:"design/position",id:"design/position",title:"Position",description:"Candidate solution vectors within a search space are the basic pieces of",source:"@site/../cilib-docs/target/mdoc/design/position.md",sourceDirName:"design",slug:"/design/position",permalink:"/docs/design/position",draft:!1,tags:[],version:"current",frontMatter:{}},c={},d=[],u={toc:d};function m(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"position"},"Position"),(0,o.kt)("p",null,"Candidate solution vectors within a search space are the basic pieces of\ninformation that computational algorithms maintain and, includes feature\nvectors that represent training patterns in a neural network.\nWithin population based algorithms, a collection of algorithm\nparticipants are employed in a search of the problem space. Each represents\na possible solution to the problem at hand, and may be in one of two\npossible states:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},'It may be a "point" in the search space where no other information about\nthe point is known, except for the value of the multi-dimensional vector\nrepresenting the position within the search space'),(0,o.kt)("li",{parentName:"ol"},'It may be a possible "solution", where the position in the multi-dimensional\nsearch space is known but, an additional value representing the\n"quality" of the vector is also maintained. This "quality" is\nreferred to as the fitness of the candidate solution.')),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Position")," is a data structure that encodes the above two cases\nexactly, allowing a ",(0,o.kt)("inlineCode",{parentName:"p"},"Position")," to either be a ",(0,o.kt)("inlineCode",{parentName:"p"},"Point")," or a ",(0,o.kt)("inlineCode",{parentName:"p"},"Solution"),".\nFurther more, ",(0,o.kt)("inlineCode",{parentName:"p"},"Position")," is an Algebraic Data Type (ADT), whereby the set\nof possible representations may not be extended further (and is enforced\nby the compiler). Any changes to a ",(0,o.kt)("inlineCode",{parentName:"p"},"Solution")," will yield a ",(0,o.kt)("inlineCode",{parentName:"p"},"Point")," - the\nnew ",(0,o.kt)("inlineCode",{parentName:"p"},"Position")," has not yet had a fitness calculated, i.e: the\nquality of the ",(0,o.kt)("inlineCode",{parentName:"p"},"Position")," is an unknown."),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Position"),", within a search space, can be created by providing the search\nspace bounds to the ",(0,o.kt)("inlineCode",{parentName:"p"},"createPosition")," function. The search space must have\nat least a single dimension (the zero-dimensional search is trivial) and, a\n",(0,o.kt)("inlineCode",{parentName:"p"},"NonEmptyList[Interval[Double]]")," represents the search space bounds.\nA ",(0,o.kt)("inlineCode",{parentName:"p"},"NonEmptyList")," is a list that is guaranteed to have at least one\ncontained element."),(0,o.kt)("p",null,"A search space is determined by a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"Interval")," instances, one\nfor each dimension. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Interval")," need not be the same for each\ndimension and differing ",(0,o.kt)("inlineCode",{parentName:"p"},"Interval"),"s may be placed together in a\n",(0,o.kt)("inlineCode",{parentName:"p"},"NonEmptyList")," to define the problem search space. As it is rather\ncommon to define a search space where an interval repeats ",(0,o.kt)("inlineCode",{parentName:"p"},"n")," times,\nsome syntax has been added to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Interval"),' data constructor to allow\nfor repetition in a more convenient way. This syntax models the text\nparser used in CIlib 1.0 for the "domain string", but is now available\nat the type level and verifiable during compilation. As an example,\nlet\'s create a 30-dimensional vector in the interval $',"[-5.12, 5.12]","$:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"Interval(-5.12,5.12)^30\n// res0: NonEmptyVector[Interval] = NonEmptyChunk([-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12], [-5.12,5.12])\n")),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Position")," may now be constructed, as we know what the bounds of the search\nspace are"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"\nmdoc\nPosition.createPosition(Interval(-5.12,5.12)^30)\n")),(0,o.kt)("p",null,"The result of creating a ",(0,o.kt)("inlineCode",{parentName:"p"},"Position")," is a ",(0,o.kt)("inlineCode",{parentName:"p"},"RVar[Position[A]]")," computation,\nas the ",(0,o.kt)("inlineCode",{parentName:"p"},"Position")," is created with a vector placed randomly within the search\nspace bounds. Furthermore, the type of the dimension elements within the\n",(0,o.kt)("inlineCode",{parentName:"p"},"Position")," is inferred, based on the provided ",(0,o.kt)("inlineCode",{parentName:"p"},"Interval")," information (in this\nexample a ",(0,o.kt)("inlineCode",{parentName:"p"},"Double"),")."),(0,o.kt)("p",null,"The normal vector operations are provided, as syntax, to make the usage\nsimpler and to mirror the mathematics defined in literature more closely.\nBelow are some examples of combining ",(0,o.kt)("inlineCode",{parentName:"p"},"Position")," instances. Take careful\nnote of the return value for the different cases of ",(0,o.kt)("inlineCode",{parentName:"p"},"Position"),". In order\nto evaluate the quality of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Position")," an ",(0,o.kt)("inlineCode",{parentName:"p"},"Eval")," instance is required."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},"\nmdoc\nval e = Eval.unconstrained[NonEmptyList,Double](pos => Feasible(pos.map(x => x * x).sum))\n\n// a is a Point and b is a Solution\nval (_, (a, b)) =\n  (for {\n    a <- Position.createPosition(Interval(-5.12,5.12)^3)\n    b <- Position.createPosition(Interval(-5.12,5.12)^3).flatMap(p => Position.eval(e, p))\n  } yield (a, b)).run(RNG.init(1234L))\n\n// Unary syntax to negate a Position\n-a\n\n// Add Point and Solution\na + b\n\n// Add Point and Point\na + a\n\n// Add Solution and Solution\nb + b\n\n// Subtract Solution from Point\na - b\n\n// a * b does not compile. Vector multiplication makes little sense.\n// If the objective was to use pairwise multiplication, there is another\n// structure called `Pointwise` which can be used to achieve this operation\n// via the `Algebra` object.\nAlgebra.pointwise(a, b)\n\n// Scalar multiplication\n3.0 *: a\n")),(0,o.kt)("p",null,"Whenever a ",(0,o.kt)("inlineCode",{parentName:"p"},"Position"),' is moved to a "new point" within the search space,\nit requires re-evaluation.'))}m.isMDXComponent=!0}}]);