"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[160],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),u=a,h=m["".concat(s,".").concat(u)]||m[u]||d[u]||r;return n?i.createElement(h,o(o({ref:t},c),{},{components:n})):i.createElement(h,o({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3416:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return d}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=["components"],l={},s=void 0,p={unversionedId:"design/entity",id:"design/entity",title:"entity",description:"Within swarm intelligence, evolutionary computation and other, similar",source:"@site/../cilib-docs/target/mdoc/design/entity.md",sourceDirName:"design",slug:"/design/entity",permalink:"/docs/design/entity",draft:!1,tags:[],version:"current",frontMatter:{}},c={},d=[],m={toc:d};function u(e){var t=e.components,n=(0,a.Z)(e,o);return(0,r.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"\nmdoc:invisible\nimport cilib._\n")),(0,r.kt)("h1",{id:"entity"},"Entity"),(0,r.kt)("p",null,"Within swarm intelligence, evolutionary computation and other, similar\nalgorithms, there is always a metaphor that the algorithm is based on.\nUsing this metaphor, the participants within the algorithm are also\nappropriately named. For example, within a Particle Swarm Optimization (PSO),\nthe participants are referred to as Particles, with Individuals being\nused in both Differential Evolution (DE) and Genetic Algorithms (GA).\nMany other examples can easily be identified in available literature."),(0,r.kt)("p",null,"It is not practical to have several representations for a similar\nconcept used within these algorithms. Based on experimentation within CIlib,\na common structure was identified that could be used to represent the\nparticipants for these metaphor-based population based algorithms. We\nrefer, collectively, to these algorithm participants as ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," instances."),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," is a simple structure that contains and manages two specific things:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"Position[A]")," within the current search space of the problem"),(0,r.kt)("li",{parentName:"ul"},'A "state" that contains all addition data required by the ',(0,r.kt)("inlineCode",{parentName:"li"},"Entity"),"\nwhich is not managed by the ",(0,r.kt)("inlineCode",{parentName:"li"},"Position[A]"),".")),(0,r.kt)("p",null,"The resulting ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," is therefore represented by the following\nparameterized data type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"final case class Entity[S,A](state: S, pos: Position[A])\n")),(0,r.kt)("p",null,"where ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," is the type of the state that the ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," maintains,\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"A")," is the type of the dimension element within a ",(0,r.kt)("inlineCode",{parentName:"p"},"Position[A]"),"."),(0,r.kt)("p",null,"The state value differs between ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," instances. A Particle requires\na velocity vector and a previous best position vector, whilst an Individual,\nrequires no additional data other that a ",(0,r.kt)("inlineCode",{parentName:"p"},"Position"),"."),(0,r.kt)("p",null,"Because the value of ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," within the ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," can be anything, it is\nnot possible to have predefined functions that allow extraction of data\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," parameter type. In order to enable this, optics are applied to\nthe instances."),(0,r.kt)("p",null,"Within the definitions of CIlib, an Individual is nothing more than an\n",(0,r.kt)("inlineCode",{parentName:"p"},"Entity[Unit,A]")," for some type ",(0,r.kt)("inlineCode",{parentName:"p"},"A"),". As the type states, there is no\nstate value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity"),", and it is defined to be ",(0,r.kt)("inlineCode",{parentName:"p"},"Unit")," - a type that\nexists with a single value (expressed as ",(0,r.kt)("inlineCode",{parentName:"p"},"()"),"), which is uninteresting."),(0,r.kt)("p",null,"Some functions use ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," instances, but\nconstrain the usage based on the shape of the ",(0,r.kt)("inlineCode",{parentName:"p"},"S")," type parameter within the\n",(0,r.kt)("inlineCode",{parentName:"p"},"Entity[S,A]"),". As mentioned within the discussion of\nlenses and optics (TODO: ADD A LINK HERE), a typeclass ",(0,r.kt)("inlineCode",{parentName:"p"},"HasMemory")," is defined to allow a state\nto contain information about some kind of memory for an ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity"),". A data\nstructure that provides this memory for a Particle is ",(0,r.kt)("inlineCode",{parentName:"p"},"Mem[A]"),", and is simply\nthe case class:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"case class Mem[A](b: Position[A], v: Position[A])\n")),(0,r.kt)("p",null,"There already exists an instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"HasMemory")," defined for the ",(0,r.kt)("inlineCode",{parentName:"p"},"Mem"),"\ndata structure. Let's have a look at some usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"\nmdoc\n// Lets create a function that expects the provided Entity to have\n// a memory within it's state parameter\ndef foo[S](x: Entity[S,Double])(implicit mem: HasMemory[S,Double]) =\n  mem._memory.get(x.state)\n\n// Now, lets create some Entity instances\nval interval = Interval(-5.12,5.12)^3\nval individual = Position.createPosition(interval).map(p => Entity((), p))\nval particle = Position.createPosition(interval).map(p => Entity(Mem(p, p.zeroed), p))\n")),(0,r.kt)("p",null,"Take note of the value held by the state parameter\nin the resulting entity instances above.\nWe would need to run the ",(0,r.kt)("inlineCode",{parentName:"p"},"RVar")," computation to get the individual and particle\nvalues, or we can simply ",(0,r.kt)("inlineCode",{parentName:"p"},"map")," the function ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")," into the ",(0,r.kt)("inlineCode",{parentName:"p"},"RVar"),", changing\nthe result of the computation to a ",(0,r.kt)("inlineCode",{parentName:"p"},"RVar")," which when executed will return the memory\nof the ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"\nmdoc\nparticle.map(p => foo(p)) // This works as expected: particles have a memory\n")),(0,r.kt)("p",null,"Because ",(0,r.kt)("inlineCode",{parentName:"p"},"individual")," does not have a memory defined, the following will fail.\nThis failure is not only expected but required to ensure that incorrect usages\nare disallowed as soon as possible."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"\nmdoc:fail\nindividual.map(i => foo(i))\n")),(0,r.kt)("p",null,"There are several optics predefined that allow for the zooming in of values in\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"Position")," as well as the state of an ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity"),". Of course a user could define\ntheir own optics, and it is recommended when custom state types are used,\nin order to work with the ",(0,r.kt)("inlineCode",{parentName:"p"},"Entity")," data."))}u.isMDXComponent=!0}}]);